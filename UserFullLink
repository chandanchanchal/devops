https://eu-west-1.console.aws.amazon.com/lambda/home?region=eu-west-1#/begin

 LINUX / MAC
aws lambda invoke --function-name demo-lambda --cli-binary-format raw-in-base64-out --payload '{"key1": "value1", "key2": "value2", "key3": "value3" }' --invocation-type Event --region eu-west-1 response.json

# WINDOWS POWERSHELL
aws lambda invoke --function-name demo-lambda --cli-binary-format raw-in-base64-out --payload '{\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\" }' --invocation-type Event --region eu-west-1 response.json

# WINDOWS CMD
aws lambda invoke --function-name demo-lambda --cli-binary-format raw-in-base64-out --payload "{""key1"":""value1"",""key2"":""value2"",""key3"":""value3""}" --invocation-type Event --region eu-west-1 response.json


import json
 
def lambda_handler(event, context):
    print("value1 = "+ event['key1'])
    print("value2 = "+ event['key2'])
    print("value3 = "+ event['key3'])
    return event['key1']
    #raise Exception('something went wrong')
#################################################################################################################################################
import json
import logging

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    """
    Lambda function to log the name of the file uploaded to an S3 bucket.

    :param event: S3 event triggering the Lambda function
    :param context: Lambda execution context
    """
    try:
        # Log the entire event for debugging purposes
        logger.info("Received event: %s", json.dumps(event, indent=2))

        # Extract bucket name and object key from the event
        bucket_name = event['Records'][0]['s3']['bucket']['name']
        object_key = event['Records'][0]['s3']['object']['key']

        # Log the bucket name and object key (file name)
        logger.info(f"File '{object_key}' uploaded to bucket '{bucket_name}'")
        
    except KeyError as e:
        logger.error(f"KeyError encountered: {e}")
        raise e

    return {
        'statusCode': 200,
        'body': json.dumps('File name logged successfully')
    }
##############################################-------------------Below is for sns processing lambda code-----------#########################

import json
import logging

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    """
    AWS Lambda function to process SNS messages.

    Args:
        event: The event dict passed by AWS Lambda, containing the SNS message.
        context: The runtime information of the Lambda function.

    Returns:
        dict: Response with status code and message.
    """
    try:
        # Log the incoming event
        logger.info("Event: %s", json.dumps(event))

        # Loop through each record in the event
        for record in event['Records']:
            # Extract the SNS message body
            sns_message = record['Sns']['Message']
            
            logger.info("Processing message: %s", sns_message)

            # Process the SNS message
            process_message(sns_message)

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'SNS message processed successfully.'})
        }

    except Exception as e:
        logger.error("Error processing SNS message: %s", str(e))
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }

def process_message(message):
    """
    Function to process the SNS message body.

    Args:
        message (str): The message body from SNS.
    """
    # Example processing logic (modify as needed for your use case)
    logger.info("Processed message content: %s", message)
