@RequestMapping("/courses")
	public List<Course> retrieveAllCourses(){
		return Arrays.asList(
		    new Course(1, "Learn AWS","Mavetsoft"),
		    new Course(2, "Learn Devops", "Mavetsoft")
		    );
	}





public class Course {
	private int id;
	private String name;
	private String author;
	
	
	
	public Course(int id, String name, String author) {
		super();
		this.id = id;
		this.name = name;
		this.author = author;
	}



	public int getId() {
		return id;
	}



	public String getName() {
		return name;
	}



	public String getAuthor() {
		return author;
	}



	@Override
	public String toString() {
		return "Course [id=" + id + ", name=" + name + ", author=" + author + "]";
	}
	
	

}

#############################################################################################################################################

package com.test.springboot.learn_spring_springboot;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/courses")
public class CourseController {

    private List<Course> courseList = new ArrayList<>(Arrays.asList(
        new Course(1, "Learn AWS", "Mavetsoft"),
        new Course(2, "Learn DevOps", "Mavetsoft")
    ));

    // Retrieve all courses
    @GetMapping
    public List<Course> retrieveAllCourses() {
        return courseList;
    }

    // Retrieve a single course by ID
    @GetMapping("/{id}")
    public Course getCourseById(@PathVariable int id) {
        return courseList.stream()
                .filter(course -> course.getId() == id)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("Course not found"));
    }

    // Add a new course
    @PostMapping
    public String addCourse(@RequestBody Course course) {
        courseList.add(course);
        return "Course added successfully!";
    }

    // Update an existing course
    @PutMapping("/{id}")
    public String updateCourse(@PathVariable int id, @RequestBody Course updatedCourse) {
        Optional<Course> existingCourse = courseList.stream()
                .filter(course -> course.getId() == id)
                .findFirst();

        if (existingCourse.isPresent()) {
            courseList.remove(existingCourse.get());
            courseList.add(updatedCourse);
            return "Course updated successfully!";
        } else {
            return "Course not found!";
        }
    }

    // Delete a course
    @DeleteMapping("/{id}")
    public String deleteCourse(@PathVariable int id) {
        courseList.removeIf(course -> course.getId() == id);
        return "Course deleted successfully!";
    }
}
###################################################################################################################################

HTTP Method	Endpoint	Description	Example Request Body
GET	/courses	Get all courses	-
GET	/courses/{id}	Get a course by ID	-
POST	/courses	Add a new course	{ "id": 3, "name": "Learn Spring", "author": "Mavetsoft" }
PUT	/courses/{id}	Update an existing course	{ "id": 2, "name": "Updated DevOps", "author": "Mavetsoft" }
DELETE	/courses/{id}	Delete a course by ID



